"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8485],{3586:(a,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>p,metadata:()=>r,toc:()=>o});var n=t(7462),s=(t(7294),t(3905)),m=t(6340);const p={},i="Day 22: Monkey Market",r={unversionedId:"2024/puzzles/day22",id:"2024/puzzles/day22",title:"Day 22: Monkey Market",description:"by @merlinorg",source:"@site/target/mdoc/2024/puzzles/day22.md",sourceDirName:"2024/puzzles",slug:"/2024/puzzles/day22",permalink:"/scala-advent-of-code/2024/puzzles/day22",draft:!1,editUrl:"https://github.com/scalacenter/scala-advent-of-code/edit/website/docs/2024/puzzles/day22.md",tags:[],version:"current",frontMatter:{},sidebar:"adventOfCodeSidebar",previous:{title:"Day 21: Keypad Conundrum",permalink:"/scala-advent-of-code/2024/puzzles/day21"},next:{title:"Day 23: LAN Party",permalink:"/scala-advent-of-code/2024/puzzles/day23"}},l={},o=[{value:"Puzzle description",id:"puzzle-description",level:2},{value:"Solution summary",id:"solution-summary",level:2},{value:"Prelude",id:"prelude",level:2},{value:"Monoids",id:"monoids",level:3},{value:"Folding",id:"folding",level:3},{value:"Plucking",id:"plucking",level:3},{value:"Part 1",id:"part-1",level:2},{value:"Pseudorandom number generator",id:"pseudorandom-number-generator",level:3},{value:"Solution",id:"solution",level:3},{value:"Without nice things",id:"without-nice-things",level:4},{value:"Part 2",id:"part-2",level:2},{value:"Summing maps",id:"summing-maps",level:3},{value:"Delta value maps",id:"delta-value-maps",level:3},{value:"Solution",id:"solution-1",level:3},{value:"Final code",id:"final-code",level:2},{value:"Run it in the browser",id:"run-it-in-the-browser",level:3},{value:"Part 1",id:"part-1-1",level:4},{value:"Part 2",id:"part-2-1",level:4},{value:"Solutions from the community",id:"solutions-from-the-community",level:2}],N={toc:o};function c(a){let{components:e,...t}=a;return(0,s.kt)("wrapper",(0,n.Z)({},N,t,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"day-22-monkey-market"},"Day 22: Monkey Market"),(0,s.kt)("p",null,"by ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/merlinorg"},"@merlinorg")),(0,s.kt)("h2",{id:"puzzle-description"},"Puzzle description"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://adventofcode.com/2024/day/22"},"https://adventofcode.com/2024/day/22")),(0,s.kt)("h2",{id:"solution-summary"},"Solution summary"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Define some elegant supporting machinery."),(0,s.kt)("li",{parentName:"ol"},"Define a generator for the part 1 monkey secrets."),(0,s.kt)("li",{parentName:"ol"},"Sum the 2000th secrets for part 1."),(0,s.kt)("li",{parentName:"ol"},"Define a generator for the part 2 monkey secrets."),(0,s.kt)("li",{parentName:"ol"},"Calculate the value provided by every sequence of secret deltas and find the best.")),(0,s.kt)("h2",{id:"prelude"},"Prelude"),(0,s.kt)("p",null,"While the Scala standard library provides many fine things, there are supporting functional\nlibraries such as ",(0,s.kt)("a",{parentName:"p",href:"https://typelevel.org/cats/"},"Cats")," and\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/scalaz/scalaz"},"Scalaz")," that let us write more elegant solutions to\npuzzles; at least, for some definition of elegance."),(0,s.kt)("p",null,"Rather than importing such a library, we can easily build the bones of what we need with\njust a few lines of code. Most AoCers will use one of these libraries along with their\nown local libraries, and solve this in fewer lines of code."),(0,s.kt)("h3",{id:"monoids"},"Monoids"),(0,s.kt)("p",null,"A ",(0,s.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Monoid"},"monoid")," is a specialisation of a\n",(0,s.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Semigroup"},"semigroup")," that,\nfor some type ",(0,s.kt)("inlineCode",{parentName:"p"},"A")," provides a ",(0,s.kt)("inlineCode",{parentName:"p"},"zero")," value of ",(0,s.kt)("inlineCode",{parentName:"p"},"A")," and some way\nto combine two ",(0,s.kt)("inlineCode",{parentName:"p"},"A"),"s into another ",(0,s.kt)("inlineCode",{parentName:"p"},"A"),". There are various laws that govern\nmonoids; for example, combining any value with zero results in the same value: ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"Z"),(0,s.kt)("mo",{parentName:"mrow"},"+"),(0,s.kt)("mi",{parentName:"mrow"},"A"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mi",{parentName:"mrow"},"A")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"Z + A = A")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.76666em",verticalAlign:"-0.08333em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07153em"}},"Z"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"A"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"A"))))),".\nHowever, we will not concern ourselves with the law. A typical example of\na monoid for numeric values, is zero (",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mn",{parentName:"mrow"},"0")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"0")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"0"))))),") and addition (",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mo",{parentName:"mrow"},"+")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"+")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.66666em",verticalAlign:"-0.08333em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"+"))))),"). This is\nlawful; ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mn",{parentName:"mrow"},"0"),(0,s.kt)("mo",{parentName:"mrow"},"+"),(0,s.kt)("mn",{parentName:"mrow"},"1"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mn",{parentName:"mrow"},"1")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"0 + 1 = 1")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.72777em",verticalAlign:"-0.08333em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"0"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"1"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"1"))))),", and we can combine things insightfully; ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mn",{parentName:"mrow"},"1"),(0,s.kt)("mo",{parentName:"mrow"},"+"),(0,s.kt)("mn",{parentName:"mrow"},"1"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mn",{parentName:"mrow"},"2")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"1 + 1 = 2")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.72777em",verticalAlign:"-0.08333em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"1"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"1"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"2"))))),".\nMonoids for a type are not necessarily unique, either. Another monoid for\nnumeric values is one (",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mn",{parentName:"mrow"},"1")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"1")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"1"))))),") and multiplication (",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mo",{parentName:"mrow"},"\u2217")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"*")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.46528em",verticalAlign:"0em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"\u2217"))))),")."),(0,s.kt)("p",null,"In Scala, we model monoids as a typeclass with implicit givens for types of\ninterest. Here, we define the ",(0,s.kt)("inlineCode",{parentName:"p"},"Semigroup")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"Monoid")," typeclasses, and provide\na given monoid for numeric values using zero and addition."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",3:!0,className:"language-scala",metastring:"3"},"trait Semigroup[A]:\n  def combine(a0: A, a1: A): A\n\ntrait Monoid[A] extends Semigroup[A]:\n  def zero: A\n\ngiven NumericMonoid[A](using N: Numeric[A]): Monoid[A] with\n  def zero: A = N.zero\n\n  def combine(a0: A, a1: A): A = N.plus(a0, a1)\n")),(0,s.kt)("h3",{id:"folding"},"Folding"),(0,s.kt)("p",null,"A ",(0,s.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Fold_(higher-order_function)"},"fold")," is\nanother useful functional programming pattern. A fold allows you to reduce\nan ",(0,s.kt)("inlineCode",{parentName:"p"},"F[A]")," into a single ",(0,s.kt)("inlineCode",{parentName:"p"},"A"),", usually using some combining operation. You\nwill probably be familiar with the built-in ",(0,s.kt)("inlineCode",{parentName:"p"},"sum")," method provided by\nScala collections. This folds over numeric values, adding them: ",(0,s.kt)("inlineCode",{parentName:"p"},"List(1, 1).sum = 2"),"."),(0,s.kt)("p",null,"Scala provides built-in generic folds, but we're interested in a very\nspecific one: Given an ",(0,s.kt)("inlineCode",{parentName:"p"},"F[A]")," and a function ",(0,s.kt)("inlineCode",{parentName:"p"},"A => B"),", we  want to define\na ",(0,s.kt)("inlineCode",{parentName:"p"},"foldMap")," operation that reduces the ",(0,s.kt)("inlineCode",{parentName:"p"},"F[A]")," to a single ",(0,s.kt)("inlineCode",{parentName:"p"},"B")," value.\nThat is, ",(0,s.kt)("inlineCode",{parentName:"p"},"foldMap: F[A] => (A => B) => B"),". For numeric values, this is\njust ",(0,s.kt)("inlineCode",{parentName:"p"},"map")," followed by ",(0,s.kt)("inlineCode",{parentName:"p"},"sum")," but we want a more general solution. For this,\nwe will leverage the ",(0,s.kt)("inlineCode",{parentName:"p"},"Monoid")," we just defined"),(0,s.kt)("p",null,"We will define ",(0,s.kt)("inlineCode",{parentName:"p"},"foldMap")," as an extension on an ",(0,s.kt)("inlineCode",{parentName:"p"},"Iterator[A]"),". We use a\ngiven ",(0,s.kt)("inlineCode",{parentName:"p"},"Monoid[B]")," to provide a zero value and a combination function, then\njust map the iterator and combine values using the built-in ",(0,s.kt)("inlineCode",{parentName:"p"},"foldLeft")," method."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",3:!0,className:"language-scala",metastring:"3"},"extension [A](self: Iterator[A])\n  def foldMap[B](f: A => B)(using M: Monoid[B]): B =\n    self.map(f).foldLeft(M.zero)(M.combine)\n")),(0,s.kt)("h3",{id:"plucking"},"Plucking"),(0,s.kt)("p",null,"One final thing extension we will use is the ability to pluck a value from\nan iterator by index. The ",(0,s.kt)("inlineCode",{parentName:"p"},"Iterator")," class represents an infinite sequence of\nvalues that can be iterated through just once and, as such, does not\nprovide any indexed extraction operations. In this puzzle (and others) we are\nonly interested in the ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"n")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"n")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"))))),"th value of a given sequence, and we can define\na useful ",(0,s.kt)("inlineCode",{parentName:"p"},"nth")," extension that combines ",(0,s.kt)("inlineCode",{parentName:"p"},"drop")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"next"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",3:!0,className:"language-scala",metastring:"3"},"extension [A](self: Iterator[A])\n  def nth(n: Int): A  = self.drop(n).next()\n")),(0,s.kt)("h2",{id:"part-1"},"Part 1"),(0,s.kt)("p",null,"Given these elegant tools, it's now time to look at the first part of the puzzle."),(0,s.kt)("h3",{id:"pseudorandom-number-generator"},"Pseudorandom number generator"),(0,s.kt)("p",null,"The puzzle starts by defining a pseudorandom number generator, which we can neatly\ndefine as some extensions on ",(0,s.kt)("inlineCode",{parentName:"p"},"Long"),". We flag these as ",(0,s.kt)("inlineCode",{parentName:"p"},"inline")," to request that\nthe compiler not introduce any function call overhead into the math."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",3:!0,className:"language-scala",metastring:"3"},"extension (self: Long)\n  inline def nextSecret: Long            = step(_ * 64).step(_ / 32).step(_ * 2048)\n  inline def step(f: Long => Long): Long = mix(f(self)).prune\n  inline def mix(n: Long): Long          = self ^ n\n  inline def prune: Long                 = self % 16777216\n")),(0,s.kt)("p",null,"With these, we can define another extension method that generates the infinite series\nof pseudorandom numbers from an initial seed. We use ",(0,s.kt)("inlineCode",{parentName:"p"},"Iterator.iterate")," which takes\nan initial value and a function to generate the next value from the prior."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",3:!0,className:"language-scala",metastring:"3"},"extension (self: Long)\n  def secretsIterator: Iterator[Long] = Iterator.iterate(self)(_.nextSecret)\n")),(0,s.kt)("h3",{id:"solution"},"Solution"),(0,s.kt)("p",null,"With the generator defined, we can solve part one by parsing the input into\na sequence of longs, running the generator for each seed and summing the 2000th\nvalues. We use ",(0,s.kt)("inlineCode",{parentName:"p"},"linesIterator")," to break the input string into individual lines,\nwe use ",(0,s.kt)("inlineCode",{parentName:"p"},"foldMap")," to map these lines into the individual answers and sum them,\nand we use our ",(0,s.kt)("inlineCode",{parentName:"p"},"secretsIterator")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"nth")," to pluck each answer."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",3:!0,className:"language-scala",metastring:"3"},"def part1(input: String): Long =\n  input.linesIterator.foldMap: line =>\n    line.toLong.secretsIterator.nth(2000)\n")),(0,s.kt)("h4",{id:"without-nice-things"},"Without nice things"),(0,s.kt)("p",null,"Imagine the horror of solving this using just the standard library!"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",3:!0,className:"language-scala",metastring:"3"},"def part1(input: String): Long =\n  input.linesIterator\n    .map: line =>\n      line.toLong.secretsIterator.drop(2000).next()\n    .sum\n")),(0,s.kt)("h2",{id:"part-2"},"Part 2"),(0,s.kt)("p",null,"Part two adds a couple of slight wrinkles. Only the last digit of each\npseudorandom number is used, and we need to pick a sequence of four deltas\n(i.e. ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"n"),(0,s.kt)("mn",{parentName:"msub"},"1")),(0,s.kt)("mo",{parentName:"mrow"},"\u2212"),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"n"),(0,s.kt)("mn",{parentName:"msub"},"0")),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"n"),(0,s.kt)("mn",{parentName:"msub"},"2")),(0,s.kt)("mo",{parentName:"mrow"},"\u2212"),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"n"),(0,s.kt)("mn",{parentName:"msub"},"1")),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"n"),(0,s.kt)("mn",{parentName:"msub"},"3")),(0,s.kt)("mo",{parentName:"mrow"},"\u2212"),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"n"),(0,s.kt)("mn",{parentName:"msub"},"2")),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"n"),(0,s.kt)("mn",{parentName:"msub"},"4")),(0,s.kt)("mo",{parentName:"mrow"},"\u2212"),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"n"),(0,s.kt)("mn",{parentName:"msub"},"3"))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"n_1 - n_0, n_2 - n_1, n_3 - n_2, n_4 - n_3")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.73333em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.30110799999999993em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"1")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7777700000000001em",verticalAlign:"-0.19444em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.30110799999999993em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"0")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mpunct"},","),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.30110799999999993em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"2")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7777700000000001em",verticalAlign:"-0.19444em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.30110799999999993em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"1")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mpunct"},","),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.30110799999999993em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"3")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7777700000000001em",verticalAlign:"-0.19444em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.30110799999999993em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"2")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mpunct"},","),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.30110799999999993em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"4")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.58056em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.30110799999999993em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"3")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))))))),") to maximize the value\nachieved if each monkey selects the last value in that group (i.e. ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"n"),(0,s.kt)("mn",{parentName:"msub"},"4"))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"n_4")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.58056em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.30110799999999993em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"4")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))))))),")\nfor the first occurrence of that sequence in their numbers."),(0,s.kt)("p",null,"We will break this into two parts: For each monkey, we will generate a\n",(0,s.kt)("inlineCode",{parentName:"p"},"Map[(Long, Long, Long, Long), Long]")," which is the value generated by that\nmonkey for each sequence of four deltas in their input. We will then\ncombine these maps for all the monkeys and select the highest total value\nachievable."),(0,s.kt)("h3",{id:"summing-maps"},"Summing maps"),(0,s.kt)("p",null,"Fortuitously, this concept of combining things is something we're very\nfamiliar with... There's a monoid for that! The zero value for such a\nmap is simply ",(0,s.kt)("inlineCode",{parentName:"p"},"Map.empty"),". The combine operation for two such maps is\nto simple merge the maps; if any key occurs in both maps then we will\ncombine both the values. And how will we combine the values? There's a\nsemigroup for that!"),(0,s.kt)("p",null,"That is to say, we will build a map monoid that relies on a semigroup for\nthe value type: Given a monoid for ",(0,s.kt)("inlineCode",{parentName:"p"},"B")," we can supply a monoid for\n",(0,s.kt)("inlineCode",{parentName:"p"},"Map[A, B]")," that provides both zero and combination. The combination\njust fold-merges the two maps, using ",(0,s.kt)("inlineCode",{parentName:"p"},"Semigroup[B]")," to combine the values.\nIn most cases, the semigroup comes from a monoid (e.g. our numeric monoid)."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",3:!0,className:"language-scala",metastring:"3"},"given MapMonoid[A, B](using S: Semigroup[B]): Monoid[Map[A, B]] with\n  def zero: Map[A, B] = Map.empty\n\n  def combine(ab0: Map[A, B], ab1: Map[A, B]): Map[A, B] =\n    ab1.foldLeft(ab0):\n      case (ab, (a1, b1)) =>\n        ab.updatedWith(a1):\n          case Some(b0) => Some(S.combine(b0, b1))\n          case None     => Some(b1)\n")),(0,s.kt)("h3",{id:"delta-value-maps"},"Delta value maps"),(0,s.kt)("p",null,"A delta value map is a map from the first occurrence of each four-digit\ndelta sequence to the final value in that sequence. We can use the\n",(0,s.kt)("inlineCode",{parentName:"p"},"sliding(5)")," method to generate a sequence of five-digit windows over\nthe random numbers. Each such window yields a map key (the four\ndigit changes) and value (the last digit).\nWe want to combine all of these windows into a single map. Luckily we're\nnow pros at combining things. The difficulty here is that our current\nmechanism for combining map-like things will duplicate values using\naddition, where we only want to keep the first value that we encounter."),(0,s.kt)("p",null,"There are many ways to skin this particular cat. However, we have raved\nlong enough, and so will go with a blunt knife. Recall that our ",(0,s.kt)("inlineCode",{parentName:"p"},"MapMonoid"),"\ncombines values using ",(0,s.kt)("inlineCode",{parentName:"p"},"Semigroup[B]"),", and that we provided a semigroup\nfor numeric values under addition."),(0,s.kt)("p",null,"Imagine we were instead to define a semigroup  for values that, rather\nthan adding them, prefers always the left-hand value (the first one that\nwe encounter in a left fold)."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",3:!0,className:"language-scala",metastring:"3"},"def leftBiasedSemigroup[A]: Semigroup[A] = (a0: A, _: A) => a0\n")),(0,s.kt)("p",null,"A monoid under this semigroup would be utterly lawless, for\n",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"Z"),(0,s.kt)("mo",{parentName:"mrow"},"\u2295"),(0,s.kt)("mi",{parentName:"mrow"},"A")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"Z \u2295 A")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.76666em",verticalAlign:"-0.08333em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07153em"}},"Z"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2295"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"A")))))," would be equal to ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"Z")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"Z")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07153em"}},"Z"))))),". However, the outlaw's life is\nnot our destiny, as don't need a monoid. We are satisfied with just\na semigroup, and our left-bias is lawfully associative."),(0,s.kt)("p",null,"With this in place we can now generate each monkey map using ",(0,s.kt)("inlineCode",{parentName:"p"},"foldMap"),"\nand ",(0,s.kt)("inlineCode",{parentName:"p"},"MapMonoid"),"! We generate the secrets iterator, extract just the\nlast digits using ",(0,s.kt)("inlineCode",{parentName:"p"},"% 10"),", take the first 2000, generate the five-digit\nsliding windows and fold-map each quintuple. At each step we return\na ",(0,s.kt)("inlineCode",{parentName:"p"},"Map[(Long, Long, Long, Long), Long]")," which the monoid combines by\ndiscarding any duplicate keys that occur.\nIt might seem that generating a map at each step would be expensive,\nbut map is specialised at small sizes, so a single-entry map has no more\noverhead than a tuple."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",3:!0,className:"language-scala",metastring:"3"},"def deltaMap(line: String): Map[(Long, Long, Long, Long), Long] =\n  given Semigroup[Long] = leftBiasedSemigroup\n  line.toLong.secretsIterator.map(_ % 10).take(2000).sliding(5).foldMap: quintuple =>\n    Map(deltaQuartuple(quintuple) -> quintuple(4))\n\ndef deltaQuartuple(q: Seq[Long]): (Long, Long, Long, Long) =\n  (q(1) - q(0), q(2) - q(1), q(3) - q(2), q(4) - q(3))\n")),(0,s.kt)("h3",{id:"solution-1"},"Solution"),(0,s.kt)("p",null,"Our solution then elegantly combines all these tools. We iterate over\neach line of the input, calculating the delta value map for the line,\nand combining these with ",(0,s.kt)("inlineCode",{parentName:"p"},"foldMap")," and the ",(0,s.kt)("inlineCode",{parentName:"p"},"MapMonoid"),". The\nsolution is then just the maximum value in the map."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",3:!0,className:"language-scala",metastring:"3"},"def part2(input: String): Long =\n  val deltaTotals = input.linesIterator.foldMap: line =>\n    deltaMap(line)\n  deltaTotals.values.max\n")),(0,s.kt)("p",null,"Wow! Such functional! So elegance! Much reuse!"),(0,s.kt)("h2",{id:"final-code"},"Final code"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",3:!0,className:"language-scala",metastring:"3"},"def part1(input: String): Long =\n  input.linesIterator.foldMap: line =>\n    line.toLong.secretsIterator.nth(2000)\n\ndef part2(input: String): Long =\n  val deltaTotals = input.linesIterator.foldMap: line =>\n    deltaMap(line)\n  deltaTotals.values.max\n\ndef deltaMap(line: String): Map[(Long, Long, Long, Long), Long] =\n  given Semigroup[Long] = leftBiasedSemigroup\n  line.toLong.secretsIterator.map(_ % 10).take(2000).sliding(5).foldMap: quintuple =>\n    Map(deltaQuartuple(quintuple) -> quintuple(4))\n\ndef deltaQuartuple(q: Seq[Long]): (Long, Long, Long, Long) =\n  (q(1) - q(0), q(2) - q(1), q(3) - q(2), q(4) - q(3))\n\nextension (self: Long)\n  private inline def step(f: Long => Long): Long = mix(f(self)).prune\n  private inline def mix(n: Long): Long          = self ^ n\n  private inline def prune: Long                 = self % 16777216\n  private inline def nextSecret: Long            = step(_ * 64).step(_ / 32).step(_ * 2048)\n\n  def secretsIterator: Iterator[Long] =\n    Iterator.iterate(self)(_.nextSecret)\n\ntrait Semigroup[A]:\n  def combine(a0: A, a1: A): A\n\ntrait Monoid[A] extends Semigroup[A]:\n  def zero: A\n\ngiven NumericMonoid[A](using N: Numeric[A]): Monoid[A] with\n  def zero: A                  = N.zero\n  def combine(a0: A, a1: A): A = N.plus(a0, a1)\n\ngiven MapMonoid[A, B](using S: Semigroup[B]): Monoid[Map[A, B]] with\n  def zero: Map[A, B] = Map.empty\n\n  def combine(ab0: Map[A, B], ab1: Map[A, B]): Map[A, B] =\n    ab1.foldLeft(ab0):\n      case (ab, (a1, b1)) =>\n        ab.updatedWith(a1):\n          case Some(b0) => Some(S.combine(b0, b1))\n          case None     => Some(b1)\n\ndef leftBiasedSemigroup[A]: Semigroup[A] = (a0: A, _: A) => a0\n\nextension [A](self: Iterator[A])\n  def nth(n: Int): A                                    =\n    self.drop(n).next()\n\n  def foldMap[B](f: A => B)(using M: Monoid[B]): B =\n    self.map(f).foldLeft(M.zero)(M.combine)\n")),(0,s.kt)("h3",{id:"run-it-in-the-browser"},"Run it in the browser"),(0,s.kt)("h4",{id:"part-1-1"},"Part 1"),(0,s.kt)(m.Z,{puzzle:"day22-part1",year:"2024",mdxType:"Solver"}),(0,s.kt)("h4",{id:"part-2-1"},"Part 2"),(0,s.kt)(m.Z,{puzzle:"day22-part2",year:"2024",mdxType:"Solver"}),(0,s.kt)("h2",{id:"solutions-from-the-community"},"Solutions from the community"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/rmarbeck/advent2024/blob/main/day22/src/main/scala/Solution.scala"},"Solution")," by ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/rmarbeck"},"Rapha\xebl Marbeck")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/Philippus/adventofcode/blob/main/src/main/scala/adventofcode2024/Day22.scala"},"Solution")," by ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/philippus"},"Philippus Baalman")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/nikiforo/aoc24/blob/main/src/main/scala/io/github/nikiforo/aoc24/D22T2.scala"},"Solution")," by ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/nikiforo"},"Artem Nikiforov")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/merlinorg/aoc2024/blob/main/src/main/scala/Day22.scala"},"Solution")," by ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/merlinorg"},"merlinorg")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/aamiguet/advent-2024/blob/main/src/main/scala/ch/aamiguet/advent2024/Day22.scala"},"Solution")," by ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/aamiguet"},"Antoine Amiguet")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://thedrawingcoder-gamer.github.io/aoc-writeups/2024/day22.html"},"Writeup")," by ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/TheDrawingCoder-Gamer"},"Bulby"))),(0,s.kt)("p",null,"Share your solution to the Scala community by editing this page.\nYou can even write the whole article! ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/scalacenter/scala-advent-of-code/discussions/424"},"See here for the expected format")))}c.isMDXComponent=!0}}]);