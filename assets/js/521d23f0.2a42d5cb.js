"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[67],{3095:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>h,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=a(7462),i=(a(7294),a(3905)),l=a(6340);const o={},r="Day 25: Code Chronicle",s={unversionedId:"2024/puzzles/day25",id:"2024/puzzles/day25",title:"Day 25: Code Chronicle",description:"by @merlinorg",source:"@site/target/mdoc/2024/puzzles/day25.md",sourceDirName:"2024/puzzles",slug:"/2024/puzzles/day25",permalink:"/scala-advent-of-code/2024/puzzles/day25",draft:!1,editUrl:"https://github.com/scalacenter/scala-advent-of-code/edit/website/docs/2024/puzzles/day25.md",tags:[],version:"current",frontMatter:{},sidebar:"adventOfCodeSidebar",previous:{title:"Day 24: Crossed Wires",permalink:"/scala-advent-of-code/2024/puzzles/day24"},next:{title:"Day 1: Trebuchet?!",permalink:"/scala-advent-of-code/2023/puzzles/day01"}},h={},c=[{value:"Puzzle description",id:"puzzle-description",level:2},{value:"Solution summary",id:"solution-summary",level:2},{value:"Parsing",id:"parsing",level:2},{value:"Matching",id:"matching",level:2},{value:"Final code",id:"final-code",level:2},{value:"Run it in the browser",id:"run-it-in-the-browser",level:3},{value:"Part 1",id:"part-1",level:4},{value:"Solutions from the community",id:"solutions-from-the-community",level:2}],p={toc:c};function u(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"day-25-code-chronicle"},"Day 25: Code Chronicle"),(0,i.kt)("p",null,"by ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/merlinorg"},"@merlinorg")),(0,i.kt)("h2",{id:"puzzle-description"},"Puzzle description"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://adventofcode.com/2024/day/25"},"https://adventofcode.com/2024/day/25")),(0,i.kt)("h2",{id:"solution-summary"},"Solution summary"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Parse and partition the locks and keys."),(0,i.kt)("li",{parentName:"ol"},"Find all lock and key combinations that could fit."),(0,i.kt)("li",{parentName:"ol"},"Return the count of potential matches.")),(0,i.kt)("h2",{id:"parsing"},"Parsing"),(0,i.kt)("p",null,"It's the last day of Advent of Code so we'll keep it simple. The input consists\nof a sequence of grids, separated by blank lines. Each grid is a sequence of lines\nconsisting of the ",(0,i.kt)("inlineCode",{parentName:"p"},"#")," and ",(0,i.kt)("inlineCode",{parentName:"p"},".")," characters. Locks have ",(0,i.kt)("inlineCode",{parentName:"p"},"#")," characters in the first\nrow,  where keys have ",(0,i.kt)("inlineCode",{parentName:"p"},".")," characters. To parse this we'll just use simple string\nsplitting."),(0,i.kt)("p",null,"First, we split the input into grids by matching on the blank lines. This gives us\nan array of strings, each grid represented by a single string. Then we partition\nthis into two arrays; one the keys, and the other locks. For this, we use the\n",(0,i.kt)("inlineCode",{parentName:"p"},"partition")," method that takes a predicate; every grid that matches this predicate\nwill be placed in the first array of the resulting tuple, the rest in the second."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",3:!0,className:"language-scala",metastring:"3"},'val (locks, keys) = input.split("\\n\\n").partition(_.startsWith("#"))\n')),(0,i.kt)("p",null,"In general, arrays are not the most ergonomic data structures to use, but for\nthis final puzzle they are more than sufficient."),(0,i.kt)("h2",{id:"matching"},"Matching"),(0,i.kt)("p",null,"To find all potential matches we will use a for comprehension to loop through\nall the locks, and then for each lock, through all the keys. For each pair of\na lock and key, we want to determine whether there is any overlap that would\nprevent the key fitting the lock.\nWe can perform this test by simply zipping the key and the lock strings; this\ngives us a collection of every corresponding character from each string. The\nkey can fit the lock if there is no location containing a ",(0,i.kt)("inlineCode",{parentName:"p"},"#")," character in\nboth grids."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",3:!0,className:"language-scala",metastring:"3"},"val matches = for\n  lock <- locks\n  key  <- keys\n  if lock.zip(key).forall: (lockChar, keyChar) =>\n    lockChar != '#' || keyChar != '#'\nyield lock -> key\n")),(0,i.kt)("p",null,"This returns all of the matching lock and key combinations; the solution to\nthe puzzle is the size of this array."),(0,i.kt)("h2",{id:"final-code"},"Final code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",3:!0,className:"language-scala",metastring:"3"},"def part1(input: String): Int =\n  val (locks, keys) = input.split(\"\\n\\n\").partition(_.startsWith(\"#\"))\n\n  val matches = for\n    lock <- locks\n    key  <- keys\n    if lock.zip(key).forall: (lockChar, keyChar) =>\n      lockChar != '#' || keyChar != '#'\n  yield lock -> key\n\n  matches.length\n")),(0,i.kt)("h3",{id:"run-it-in-the-browser"},"Run it in the browser"),(0,i.kt)("h4",{id:"part-1"},"Part 1"),(0,i.kt)(l.Z,{puzzle:"day25-part1",year:"2024",mdxType:"Solver"}),(0,i.kt)("h2",{id:"solutions-from-the-community"},"Solutions from the community"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/Philippus/adventofcode/blob/main/src/main/scala/adventofcode2024/Day25.scala"},"Solution")," by ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/philippus"},"Philippus Baalman")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/aamiguet/advent-2024/blob/main/src/main/scala/ch/aamiguet/advent2024/Day25.scala"},"Solution")," by ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/aamiguet"},"Antoine Amiguet")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/rmarbeck/advent2024/blob/main/day25/src/main/scala/Solution.scala"},"Solution")," by ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/rmarbeck"},"Rapha\xebl Marbeck")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://thedrawingcoder-gamer.github.io/aoc-writeups/2024/day25.html"},"Writeup")," by ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/TheDrawingCoder-Gamer"},"Bulby")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/AvaPL/Advent-of-Code-2024/tree/main/src/main/scala/day25"},"Solution")," by ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/AvaPL"},"Pawe\u0142 Cembaluk"))),(0,i.kt)("p",null,"Share your solution to the Scala community by editing this page.\nYou can even write the whole article! ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/scalacenter/scala-advent-of-code/discussions/424"},"See here for the expected format")))}u.isMDXComponent=!0}}]);